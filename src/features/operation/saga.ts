import { SagaIterator } from 'redux-saga';
import { SagaReturnType, call, put, select } from 'redux-saga/effects';

import {
  selectors as operationSelectors,
  api as apiBudgetItem,
  actions as operationActions,
} from '@features/operation';

/**
 * –°–∞–≥–∞ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã,
 * –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ—ë –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * –∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏(–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã)
 * @returns void - –∑–∞–ø–∏—Å—å –≤ —Å—Ç–µ–π—Ç
 */

export function* getDataOperationById(ids: string): SagaIterator<any> {
  console.log('üöÄ ~ function*getDataOperationById ~ ids:', ids);

  const id = '651b1a5bba9cfae1c95bd3a6';
  try {
    /** –ø–æ–ª—É—á–µ–Ω–∏–µ id operation */
    // const { id }: ReturnType<typeof operationSelectors.operationSelectors> =
    //   yield select(operationSelectors.operationSelectors);

    /** –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä c id */
    const operationData: SagaReturnType<typeof apiBudgetItem.operationFetch> =
      yield call(apiBudgetItem.operationFetch, id);

    /** –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–µ–π—Ç –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ */
    yield put(operationActions.setFields(operationData));
  } catch (error) {
    // eslint-disable-next-line no-console
    console.log('error getDataOperationById', error);
  }
}

export const sagas = {
  getDataOperationById,
};
